version: '3.3'
services:
    rabbitmq:
        image: rabbitmq:3.8-management
        environment:
            - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit heartbeat 600 consumer_timeout 2592000000
        volumes:
            - /var/lib/rabbitmq:/var/lib/rabbitmq
        ports:
            - "5672:5672"
            - "15672:15672"
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
            interval: 60s
            retries: 5

    postgres:
        image: postgres:13-alpine
        environment:
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow
        volumes:
            - /var/lib/postgresql/data:/var/lib/postgresql/data
        command: -c max_connections=100 -c shared_buffers=${POSTGRES_MEM}MB
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 60s
            retries: 5

    pgbouncer:
        image: ranlu/pgbouncer:1.16.1
        environment:
            - DB_USER=airflow
            - DB_PASSWORD=airflow
            - DB_HOST=postgres
            - DB_NAME=airflow
            - MAX_CLIENT_CONN=10000
            - DEFAULT_POOL_SIZE=100
            - POOL_MODE=transaction
        ports:
            - "5432:5432"

    # single shot initialize the database
    init-seuronbot:
        image: ${SEURON_TAG}
        restart: on-failure
        environment:
            - FERNET_KEY
            - REMOTE_LOG_FOLDER
            - DEPLOYMENT
            - ZONE
            - _AIRFLOW_WWW_USER_USERNAME=${_AIRFLOW_WWW_USER_USERNAME:-airflow}
            - _AIRFLOW_WWW_USER_PASSWORD=${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        #volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config:/usr/local/airflow/config
            #- /var/run/docker.sock:/var/run/docker.sock
        #ports:
            #- "8080:8080"
        command: bash pipeline/init_pipeline.sh
        deploy:
            restart_policy:
                condition: on-failure

    webserver:
        image: ${SEURON_TAG}
        restart: always
        environment:
            - FERNET_KEY
            - SECRET_KEY
            - REMOTE_LOG_FOLDER
        volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config:/usr/local/airflow/config
            - /var/run/docker.sock:/var/run/docker.sock
        #ports:
        #    - "8080:8080"
        command: airflow webserver
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8080/airflow/health"]
            interval: 60s
            timeout: 10s
            retries: 5
        deploy:
            restart_policy:
                condition: any

    scheduler:
        image: ${SEURON_TAG}
        restart: always
        volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config:/usr/local/airflow/config
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            - FERNET_KEY
            - REMOTE_LOG_FOLDER
        command: airflow scheduler
        healthcheck:
            test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
            interval: 60s
            timeout: 10s
            retries: 5
        deploy:
            restart_policy:
                condition: any

    worker-manager:
        image: ${SEURON_TAG}
        restart: always
        volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config:/usr/local/airflow/config
            - /var/run/docker.sock:/var/run/docker.sock
            - /tmp:/tmp
        environment:
            - FERNET_KEY
            - REMOTE_LOG_FOLDER
            - AIRFLOW__CELERY__WORKER_CONCURRENCY=4
        command: airflow celery worker --without-gossip --without-mingle -q manager
        deploy:
            restart_policy:
                condition: any

    slackbot:
        image: ${SEURON_TAG}
        restart: always
        volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config:/usr/local/airflow/config
            - /var/run/docker.sock:/var/run/docker.sock
            - /tmp:/tmp
        environment:
            - FERNET_KEY
            - REMOTE_LOG_FOLDER
            - SLACK_TOKEN
            - BOTUSERID
            - DEPLOYMENT
        command: python slackbot/slack_bot.py
        deploy:
            restart_policy:
                condition: any

    proxy:
        image: nginx:1.13.5-alpine
        restart: always
        ports:
            - target: 443
              published: 443
              protocol: tcp
              mode: host
        deploy:
            restart_policy:
                condition: any
        #volumes:
            #- ../secrets:/run/secrets/
        command:
            sh -c "apk update && apk add apache2-utils &&
            BASIC_AUTH_PASSWORD=$$(cat /run/secrets/basic_auth_password) &&
            [ -n \"$$BASIC_AUTH_PASSWORD\" ] &&
                   AUTH_BASIC_STRING=\\\"AirflowAuthorization\\\" &&
                   htpasswd -b -c /etc/nginx/.htpasswd $${BASIC_AUTH_USERNAME} $$(cat /run/secrets/basic_auth_username) ||
            AUTH_BASIC_STRING=off &&
            SSL_CERTIFICATE=$$(cat /run/secrets/ssl_certificate) &&
            [ -n \"$$SSL_CERTIFICATE\" ] &&
                   SSL_BLOCK=\"ssl_certificate \\/run\\/secrets\\/ssl_certificate;\\n
                    ssl_certificate_key \\/run\\/secrets\\/ssl_certificate_key;\\n
                    ssl_session_cache  builtin:1000  shared:SSL:10m;\\n
                    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;\\n
                    ssl on;\" ||
            SSL_BLOCK=\"ssl off;\" && 
            echo $$SSL_BLOCK && 
            if ! grep airflow /etc/nginx/nginx.conf; then
                sed -i -e \"s/include \\/etc\\/nginx\\/conf\\.d\\/\\*\.conf;//\" 
                -e \"\\$$s/}/
                    error_log \\/var\\/log\\/error.log;\\n
                    gzip  on;\\n
                    gzip_vary on;\\n
                    gzip_min_length 10240;\\n
                    gzip_proxied expired no-cache no-store private auth;\\n
                    gzip_types text\\/plain text\\/css text\\/xml text\\/javascript application\\/x-javascript application\\/xml;\\n
                    gzip_disable \\\"MSIE [1-6]\.\\\";\\n
                    server {\\n
                        listen 80;\\n
                        listen 443;\\n
                        auth_basic $${AUTH_BASIC_STRING};\\n
                        auth_basic_user_file \\/etc\\/nginx\\/\.htpasswd;\\n
                        $${SSL_BLOCK}\\n
                        proxy_set_header X-Real-IP \\$$remote_addr;\\n
                        proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;\\n
                        if (\\$$http_referer ~* \\\".*\\/rabbitmq\\/*.*\\\") {\\n
                            set \\$$is_rabbitmq \\\"A\\\";\\n
                        }\\n
                        if (\\$$request_uri !~* ^\\/rabbitmq\\/.*) {\\n
                            set \\$$is_rabbitmq \\\"\\$${is_rabbitmq}B\\\";\\n
                        }\\n
                        if (\\$$is_rabbitmq = AB) { \\n
                            rewrite ^\\/*(.*) \\/rabbitmq\\/\\$$1 permanent;\\n
                        }\\n
                        location \\/airflow\\/ {\\n
                            proxy_pass http:\\/\\/webserver:8080;\\n
                            proxy_set_header Host \\$$http_host;\\n
                            proxy_redirect off;\\n
                            proxy_http_version 1.1; \\n
                            proxy_set_header Upgrade \\$$http_upgrade; \\n
                            proxy_set_header Connection \\\"upgrade\\\"; \\n
                            proxy_set_header X-Forwarded-Proto \\$$scheme; \\n
                        }\\n
                        location ^~ \\/rabbitmq\\/ {\\n
                            proxy_pass http:\\/\\/rabbitmq:15672\\/;\\n
                            proxy_redirect off;\\n
                        }\\n
                    }\\n
                }/\" /etc/nginx/nginx.conf;
            fi &&
            unset BASIC_AUTH_PASSWORD &&
            unset BASIC_AUTH_USERNAME &&
            unset SSL_CERTIFICATE &&
            nginx-debug -g \"daemon off;\" 2>&1"
        secrets:
            - basic_auth_username
            - basic_auth_password
            - ssl_certificate
            - ssl_certificate_key

secrets:
    basic_auth_username:
        external: true
    basic_auth_password:
        external: true
    ssl_certificate:
        external: true
    ssl_certificate_key:
        external: true

networks:
    default:
        attachable: true
        ipam:
            driver: default
            config:
                - subnet: 10.253.0.0/16
